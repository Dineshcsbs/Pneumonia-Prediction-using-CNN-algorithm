import pandas as pd
data=pd.read_csv("C:\\Users\\91701\\Desktop\\heart\\heart.csv")
data.isnull().sum()
data_dup=data.duplicated().any()
data_dup
data=data.drop_duplicates()
data_dup=data.duplicated().any()
data_dup
cate_val=[]
cont_val=[]
for column in data.columns:
    if data[column].nunique()<=10:
        cate_val.append(column)
    else:
        cont_val.append(column)
cate_val
cont_val
cate_val
data['cp'].unique()
cate_val.remove('sex')
cate_val.remove('target')
data=pd.get_dummies(data,columns=cate_val,drop_first=True)
data.head()


from sklearn.preprocessing import StandardScaler 
st=StandardScaler() 
data[cont_val]=st.fit_transform(data[cont_val]) 
data.head() 
X=data.drop('target',axis=1) 
y=data['target']   



from sklearn.model_selection import train_test_split 
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)  



from sklearn.linear_model import LogisticRegression 
log=LogisticRegression() 
log.fit(X_train,y_train) 
y_predl=log.predict(X_test)  


from sklearn.metrics import accuracy_score 
accuracy_score(y_test,y_predl) 
from sklearn import svm 
svm=svm.SVC() 
svm.fit(X_train,y_train) 
y_pred2=svm.predict(X_test) 
accuracy_score(y_test,y_pred2)



from sklearn.neighbors import KNeighborsClassifier 
knn=KNeighborsClassifier()
knn.fit(X_train,y_train) 
y_pred3=knn.predict(X_test) 
accuracy_score(y_test,y_pred3) 
score=[]
for k in range(1,40): 
    knn=KNeighborsClassifier(n_neighbors=k) 
    knn.fit(X_train,y_train) 
    y_pred=knn.predict(X_test) 
    score.append(accuracy_score(y_test,y_pred))



import matplotlib.pyplot as plt 
plt.plot(score) 
plt.xlabel("K Value") 
plt.ylabel("Acc") 
plt.show() 
knn=KNeighborsClassifier(n_neighbors=2) 
knn.fit(X_train,y_train) 
y_pred=knn.predict(X_test) 
accuracy_score(y_test,y_pred) 
data=pd.read_csv('heart.csv') 
data=data.drop_duplicates() 
X=data.drop('target',axis=1) 
y=data['target'] 
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)



from sklearn.tree import DecisionTreeClassifier 
dt=DecisionTreeClassifier() 
dt.fit(X_train,y_train) 
y_pred4=dt.predict(X_test) 
accuracy_score(y_test,y_pred4)


from sklearn.ensemble import RandomForestClassifier 
rf=RandomForestClassifier() 
rf.fit(X_train,y_train) 
y_pred5=rf.predict(X_test) 
accuracy_score(y_test,y_pred5)


from sklearn.ensemble import GradientBoostingClassifier 
gbc=GradientBoostingClassifier() 
gbc.fit(X_train,y_train) 
y_pred6=gbc.predict(X_test) 
accuracy_score(y_test,y_pred6) 
final_data=pd.DataFrame({'Models':['LR','SVM','KNN','DT','RF','GB'],'ACC':[accuracy_score(y_test,y_predl)*100,accuracy_score(y_test,y_pred2)*100,accuracy_score(y_test,y_pred3)*100,accuracy_score(y_test,y_pred4)*100,accuracy_score(y_test,y_pred5)*100,accuracy_score(y_test,y_pred6)*100]}) 
final_data




import seaborn as sns
sns.barplot(x=final_data['Models'],y=final_data['ACC'])
X=data.drop('target',axis=1)
y=data['target']




from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(X_train,y_train)



import pandas as pd
new_data=pd.DataFrame(
{
  'age':52,
  'sex':1,
  'cp':3,
  'trestbps':125,
  'chol':212,
  'fbs':0,
  'restecg':1,
  'thalachh':168,
  'exng':0,
  'oldpeak':1.0,
  'slp':2,
  'caa':2,
  'thall':3,
  #'target':1
},index=[0])
new_data
p=rf.predict(new_data)
if p[0]==0:
    print("No Disease")
else:
    print("Disease")



import joblib
joblib.dump(rf,'model_joblib_heart')
model=joblib.load('model_joblib_heart')
model.predict(new_data)



from tkinter import *
import joblib
def show_entry_fields():
    p1=int(e1.get())
    p2=int(e2.get())
    p3=int(e3.get())
    p4=int(e4.get())
    p5=int(e5.get())
    p6=int(e6.get())
    p7=int(e7.get())
    p8=int(e8.get())
    p9=int(e9.get())
    p10=float(e10.get())
    p11=int(e11.get())
    p12=int(e12.get())
    p13=int(e13.get())
    model = joblib.load('model_joblib_heart')
    result=model.predict([[p1,p2,p3,p4,p5,p6,p7,p8,p8,p10,p11,p12,p13]])
    if result == 0:
        Label(master, text="No Heart Disease",fg="red").grid(row=31)
    else:
        Label(master, text="Possibility of HeartDisease",fg="red").grid(row=31)
    master = Tk()
    master.title("Heart Disease Prediction System")
    label = Label(master, text = "Cardium Disease Prediction System", bg = "black", fg = "white").grid(row=0,columnspan=2)
    Label(master, text="Age").grid(row=1)
    Label(master, text="Male Or Female [1/0]").grid(row=2)
    Label(master, text="ChestPain[0-3]").grid(row=3)
    Label(master, text="Bloodpressure").grid(row=4)
    Label(master, text="Cholesterol").grid(row=5)
    Label(master, text="Bloodsugar[0/1]").grid(row=6)
    Label(master, text="Electrocardiograph[0/1]").grid(row=7)
    Label(master, text="Max heartrate").grid(row=8)
    Label(master, text="Exercise induced angina[0/1]").grid(row=9)
    Label(master, text="Distance of SD").grid(row=10)
    Label(master, text="ST elevation[0-2]").grid(row=11)
    Label(master, text="Major vessels[0-3]").grid(row=12)
    Label(master, text="Pain after nitrate tablet").grid(row=13)
    e1 = Entry(master)
    e2 = Entry(master)
    e3 = Entry(master)
    e4 = Entry(master)
    e5 = Entry(master)
    e6 = Entry(master)
    e7 = Entry(master)
    e8 = Entry(master)
    e9 = Entry(master)
    e10 = Entry(master)
    e11 = Entry(master)
    e12 = Entry(master)
    e13 = Entry(master)
    e1.grid(row=1, column=1)
    e2.grid(row=2, column=1)
    e3.grid(row=3, column=1)
    e4.grid(row=4, column=1)
    e5.grid(row=5, column=1)
    e6.grid(row=6, column=1)
    e7.grid(row=7, column=1)
    e8.grid(row=8, column=1)
    e9.grid(row=9, column=1)
    e10.grid(row=10, column=1)
    e11.grid(row=11, column=1)
    e12.grid(row=12, column=1)
    e13.grid(row=13, column=1)
    Button(master, text='Predict', command=show_entry_fields).grid()
    mainloop()
